apiVersion: apps/v1
kind: Deployment
metadata:
  name: hivebox
  labels:
    app: hivebox
spec:
  replicas: {{ .Values.replicas.hivebox }}
  selector:
    matchLabels:
      app: hivebox
  template:
    metadata:
      labels:
        app: hivebox
    spec:
      {{- if gt (int .Values.replicas.hivebox) 1 }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - hivebox
                topologyKey: kubernetes.io/hostname
      {{- end }}
      securityContext:
        {{- include "common.podSecurityContext" . | nindent 8 }}
      containers:
        - name: hivebox
          image: {{ .Values.images.hivebox }}
          ports:
            - containerPort: 5000
          env:
            - name: REDIS_HOST
              value: {{ .Values.services.redis | quote }}
            - name: MINIO_HOST
              value: {{ .Values.services.minio | quote }}
          securityContext:
            {{- include "common.containerSecurityContext" . | nindent 12 }}
          resources:
            {{- include "common.resources" (dict "Values" .Values "name" "hivebox") | nindent 12 }}
          readinessProbe:
            httpGet:
              path: /readyz
              port: 5000
            initialDelaySeconds: 30
            timeoutSeconds: 480
            failureThreshold: 3
            periodSeconds: 600
          livenessProbe:
            httpGet:
              path: /version
              port: 5000
            timeoutSeconds: 3
            failureThreshold: 3
            periodSeconds: 60
          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
      volumes:
        - name: tmp-volume
          emptyDir: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app: redis
spec:
  replicas: {{ .Values.replicas.redis }}
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      securityContext:
        {{- include "common.podSecurityContext" . | nindent 10 }}
      containers:
        - name: valkey
          image: {{ .Values.images.redis }}
          ports:
            - containerPort: 6379
          command: ["valkey-server"]
          args: ["--save", "", "--appendonly", "no"]
          securityContext:
            {{- include "common.containerSecurityContext" . | nindent 12 }}
          resources:
            {{- include "common.resources" (dict "Values" .Values "name" "redis") | nindent 12 }}
          volumeMounts:
            - name: valkey-data
              mountPath: /data
      volumes:
        - name: valkey-data
          emptyDir: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  labels:
    app: minio
spec:
  replicas: {{ .Values.replicas.minio }}
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      securityContext:
        {{- include "common.podSecurityContext" . | nindent 10 }}
      containers:
        - name: minio
          image: {{ .Values.images.minio }}
          ports:
            - containerPort: 9000
          command: ["minio", "server", "/data"]
          env:
            - name: MINIO_ROOT_USER
              value: {{ .Values.minio.accessKey | quote }}
            - name: MINIO_ROOT_PASSWORD
              value: {{ .Values.minio.secretKey | quote }}
          securityContext:
            {{- include "common.containerSecurityContext" . | nindent 12 }}
          resources:
            {{- include "common.resources" (dict "Values" .Values "name" "minio") | nindent 12 }}
          volumeMounts:
            - name: minio-data
              mountPath: /data
      volumes:
        - name: minio-data
          emptyDir: {}
